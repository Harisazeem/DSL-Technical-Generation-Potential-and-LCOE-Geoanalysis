# -*- coding: utf-8 -*-
"""Copy of US County TGP (Land_Based_Wind)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vjyLGQE2qQS0BLJT9_eJUuLl-6KrHpWS
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import glob
import geopandas as gpd
from shapely.geometry import Point
from fiona.crs import from_epsg

"""#Mapping County Boundaries"""

counties = gpd.read_file("/content/us-county-boundaries.shp")

fig, ax = plt.subplots(figsize=(10, 15), dpi=50)
counties.plot(ax=ax, color='grey', linewidth=10)
ax.set_axis_off()
plt.savefig("county_state_boundaries.png", bbox_inches='tight', dpi=2500, pad_inches=0)
plt.show()

"""#Merging TGP for Land Based Wind with Counties"""

CountyTGP = pd.read_csv("/content/techpot_baseline_county.csv")

CountyTGPLand_Based_wind = CountyTGP[CountyTGP["Technology"] == 'land_based_wind']

CountyTGPLand_Based_wind['County Name'] = CountyTGPLand_Based_wind['County Name'].replace('DeWitt', 'De Witt')

# Perform the merge
merged_gdf = gpd.GeoDataFrame(
    CountyTGPLand_Based_wind.merge(
        counties,
        how='left',
        left_on=['County Name', 'State Name'],
        right_on=['name', 'state_name']
    )
)

# You may want to drop unnecessary columns after the merge
columns_to_drop = ['name', 'state_name']
merged_gdf.drop(columns=columns_to_drop, inplace=True)

# Print the merged GeoDataFrame
print(merged_gdf)

merged_gdf.rename(columns={'Technical Generation Potential - MWh MWh': 'Technical Generation Potential (MWh)'}, inplace=True)

merged_gdf["Technical Generation Potential (MWh)"] = merged_gdf["Technical Generation Potential (MWh)"]/1000000

"""#Mapping Land Based Wind TGP"""



# Define the list of desired state names
desired_states = ['Texas', 'California', 'Nebraska', 'Massachusetts', 'New York', 'Georgia']

# Filter the GeoDataFrame to include only counties from desired states
filtered_gdf = merged_gdf[merged_gdf['State Name'].isin(desired_states)]

# Create the heatmap
fig, ax = plt.subplots(figsize=(10, 10))

# Plot the heatmap
filtered_gdf.plot(column='Technical Generation Potential (MWh)', cmap='inferno', ax=ax, legend=True)

# Add title
plt.title('Technical Generation Potential (MWh) Heatmap for Selected States')


plt.tight_layout(pad=1)

# Remove axis
ax.set_axis_off()

# Remove axis
ax.set_axis_off()


plt.savefig("LBWindTGPCounties2.png", bbox_inches='tight', dpi=300, pad_inches=0)

# Show the plot
plt.show()

import matplotlib.colors as mcolors
import numpy as np

# Assuming 'merged_gdf' is your GeoDataFrame with the merged data

# Define the list of desired state names
desired_states = ['Texas', 'California', 'Nebraska', 'Massachusetts', 'New York', 'Georgia']

# Filter the GeoDataFrame to include only counties from desired states
filtered_gdf = merged_gdf.copy()

# Define a custom subdued color
subdued_color = (0.7, 0.7, 0.9)  # light blue subdued color

# Assign colors based on conditions using list comprehension
filtered_gdf['color'] = [subdued_color if state not in desired_states else merged_gdf.loc[i, 'Technical Generation Potential (MWh)'] for i, state in enumerate(filtered_gdf['State Name'])]

# Create the plot for counties from the specified states
fig, ax = plt.subplots(figsize=(10, 10), dpi=2000, facecolor='black')
filtered_gdf[filtered_gdf['State Name'].isin(desired_states)].plot(column='color', cmap='Oranges', ax=ax, legend=False)

# Create the plot for counties from other states
filtered_gdf[~filtered_gdf['State Name'].isin(desired_states)].plot(color=subdued_color, ax=ax)

# Add title
plt.title('Technical Generation Potential (MWh) Heatmap for Selected States')

# Remove axis
ax.set_axis_off()

# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()

# Create a colorbar
cax = fig.add_axes([0.2, 0.2, 0.6, 0.02]) # [left, bottom, width, height]
cmap = plt.cm.Oranges  # define the colormap
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)  # define the normalization
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)  # create a ScalarMappable
sm.set_array([])  # empty array for the data range
cbar = plt.colorbar(sm, cax=cax, orientation='horizontal')  # create the colorbar with horizontal orientation

# Set colorbar label color to white

# Set colorbar tick labels color to white
cbar.ax.xaxis.set_tick_params(color='white')

# Set colorbar ticks and labels
ticks = np.linspace(min_value, max_value, num=5)  # Define tick positions
tick_labels = ['{:.2f}'.format(tick) for tick in ticks]  # Format tick labels
cbar.ax.xaxis.set_ticks(ticks)  # Set ticks positions
cbar.ax.set_xticklabels(tick_labels, color='white')  # Set tick labels and color

plt.savefig("LBWindTGPCounties3.png", bbox_inches='tight', dpi=300, pad_inches=0)

# Show the plot
plt.show()

import matplotlib.colors as mcolors

# Assuming 'merged_gdf' is your GeoDataFrame with the merged data

# Define the list of desired state names
desired_states = ['Texas', 'California', 'Nebraska', 'Massachusetts', 'New York', 'Georgia']

# Filter the GeoDataFrame to include only counties from desired states
filtered_gdf = merged_gdf.copy()

# Define a custom subdued color
subdued_color = (0.1, 0.1, 0.3)  # dark blue subdued color

# Assign colors based on conditions using list comprehension
filtered_gdf['color'] = [subdued_color if state not in desired_states else merged_gdf.loc[i, 'Technical Generation Potential (MWh)'] for i, state in enumerate(filtered_gdf['State Name'])]

# Create the plot for counties from the specified states
fig, ax = plt.subplots(figsize=(18, 11), dpi=500, facecolor='black')
filtered_gdf[filtered_gdf['State Name'].isin(desired_states)].plot(column='color', cmap='Oranges', ax=ax, legend=False)

# Create the plot for counties from other states
filtered_gdf[~filtered_gdf['State Name'].isin(desired_states)].plot(color=subdued_color, ax=ax)

# Add title
plt.title('Technical Generation Potential (MWh) Heatmap for Selected States')

# Remove axis
ax.set_axis_off()

# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()

# Create a colorbar
cax = fig.add_axes([0.2, 0.05, 0.6, 0.02]) # [left, bottom, width, height]
cmap = plt.cm.Oranges  # define the colormap
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)  # define the normalization
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)  # create a ScalarMappable
sm.set_array([])  # empty array for the data range
cbar = plt.colorbar(sm, cax=cax, orientation='horizontal')  # create the colorbar with horizontal orientation

# Set colorbar label color to white

# Set colorbar tick labels color to white
cbar.ax.xaxis.set_tick_params(color='white')

# Set colorbar ticks and labels
ticks = np.linspace(min_value, max_value, num=5)  # Define tick positions
tick_labels = ['{:.2f}'.format(tick) for tick in ticks]  # Format tick labels
cbar.ax.xaxis.set_ticks(ticks)  # Set ticks positions
cbar.ax.set_xticklabels(tick_labels, color='white')  # Set tick labels and color


plt.tight_layout(pad=1)

plt.savefig("LBWindTGPCounties4.png", bbox_inches='tight', dpi=300, pad_inches=0)

# Show the plot
plt.show()

import matplotlib.colors as mcolors



# Define custom colormap with varying shades of orange
custom_colors = ['#440154', '#404387', '#29788E', '#22A784', '#7AD151', '#FFA500']

cmap = mcolors.ListedColormap(custom_colors)





# Assuming 'merged_gdf' is your GeoDataFrame with the merged data

# Define the list of desired state names
desired_states = ['Texas', 'California', 'Nebraska', 'Massachusetts', 'New York', 'Georgia']

# Filter the GeoDataFrame to include only counties from desired states
filtered_gdf = merged_gdf.copy()

# Define a custom subdued color
subdued_color = (0.01, 0.01, 0.3)  # dark blue subdued color


# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()



# Ensure colormap and normalization match your data range

norm = mcolors.Normalize(vmin=min_value, vmax=max_value)


# Assign colors based on data values and normalization
filtered_gdf['color'] = [subdued_color if state not in desired_states else cmap(norm(merged_gdf.loc[i, 'Technical Generation Potential (MWh)'])) for i, state in enumerate(filtered_gdf['State Name'])]




# Create the plot
fig, ax = plt.subplots(figsize=(18, 11), dpi=500, facecolor='black')

# Plot counties with the assigned colors
filtered_gdf.plot(color=filtered_gdf['color'], ax=ax)

# Create the plot for counties from other states
filtered_gdf[~filtered_gdf['State Name'].isin(desired_states)].plot(color=subdued_color, ax=ax)






# Add title
plt.title('Technical Generation Potential (MWh) Heatmap for Selected States')

# Remove axis
ax.set_axis_off()

# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()

# Create a colorbar
cax = fig.add_axes([0.2, 0.05, 0.6, 0.02]) # [left, bottom, width, height]
cmap = plt.cm.Oranges  # define the colormap
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)  # define the normalization
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)  # create a ScalarMappable
sm.set_array([])  # empty array for the data range
cbar = plt.colorbar(sm, cax=cax, orientation='horizontal')  # create the colorbar with horizontal orientation

# Set colorbar label color to white

# Set colorbar tick labels color to white
cbar.ax.xaxis.set_tick_params(color='white')

# Set colorbar ticks and labels
ticks = np.linspace(min_value, max_value, num=5)  # Define tick positions
tick_labels = ['{:.2f}'.format(tick) for tick in ticks]  # Format tick labels
cbar.ax.xaxis.set_ticks(ticks)  # Set ticks positions
cbar.ax.set_xticklabels(tick_labels, color='white')  # Set tick labels and color


plt.tight_layout(pad=1)

plt.savefig("LBWindTGPCounties4.png", bbox_inches='tight', dpi=300, pad_inches=0)

# Show the plot
plt.show()

import matplotlib.colors as mcolors


# Assuming 'merged_gdf' is your GeoDataFrame with the merged data

# Define the list of desired state names
desired_states = ['Texas', 'California', 'Nebraska', 'Massachusetts', 'New York', 'Georgia']

# Filter the GeoDataFrame to include only counties from desired states
filtered_gdf = merged_gdf.copy()

# Define a custom subdued color
subdued_color = (0.1, 0.1, 0.1)  # dark blue subdued color


# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()



# Ensure colormap and normalization match your data range
cmap = plt.cm.viridis
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)


# Assign colors based on data values and normalization
filtered_gdf['color'] = [subdued_color if state not in desired_states else cmap(norm(merged_gdf.loc[i, 'Technical Generation Potential (MWh)'])) for i, state in enumerate(filtered_gdf['State Name'])]




# Create the plot
fig, ax = plt.subplots(figsize=(18, 11), dpi=500, facecolor='black')

# Plot counties with the assigned colors
filtered_gdf.plot(color=filtered_gdf['color'], ax=ax)

# Create the plot for counties from other states
filtered_gdf[~filtered_gdf['State Name'].isin(desired_states)].plot(color=subdued_color, ax=ax)






# Add title
plt.title('Technical Generation Potential (MWh) Heatmap for Selected States')

# Remove axis
ax.set_axis_off()

# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()

# Create a colorbar
cax = fig.add_axes([0.2, 0.05, 0.6, 0.02]) # [left, bottom, width, height]
cmap = plt.cm.viridis  # define the colormap
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)  # define the normalization
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)  # create a ScalarMappable
sm.set_array([])  # empty array for the data range
cbar = plt.colorbar(sm, cax=cax, orientation='horizontal')  # create the colorbar with horizontal orientation

# Set colorbar label color to white

# Set colorbar tick labels color to white
cbar.ax.xaxis.set_tick_params(color='white')

# Set colorbar ticks and labels
ticks = np.linspace(min_value, max_value, num=5)  # Define tick positions
tick_labels = ['{:.2f}'.format(tick) for tick in ticks]  # Format tick labels
cbar.ax.xaxis.set_ticks(ticks)  # Set ticks positions
cbar.ax.set_xticklabels(tick_labels, color='white')  # Set tick labels and color


plt.tight_layout(pad=1)

plt.savefig("LBWindTGPCounties6.png", bbox_inches='tight', dpi=300, pad_inches=0)

# Show the plot
plt.show()



import matplotlib.colors as mcolors


# Assuming 'merged_gdf' is your GeoDataFrame with the merged data

# Define the list of desired state names
desired_states = ['Texas', 'California', 'Nebraska', 'Massachusetts', 'New York', 'Georgia']

# Filter the GeoDataFrame to include only counties from desired states
filtered_gdf = merged_gdf.copy()

# Define a custom subdued color
subdued_color = (0.1, 0.1, 0.1)  # dark blue subdued color


# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()



# Ensure colormap and normalization match your data range
cmap = plt.cm.viridis
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)


# Assign colors based on data values and normalization
filtered_gdf['color'] = [subdued_color if state not in desired_states else cmap(norm(merged_gdf.loc[i, 'Technical Generation Potential (MWh)'])) for i, state in enumerate(filtered_gdf['State Name'])]




# Create the plot
fig, ax = plt.subplots(figsize=(18, 11), dpi=500, facecolor='white')

# Plot counties with the assigned colors
filtered_gdf.plot(color=filtered_gdf['color'], ax=ax)

# Create the plot for counties from other states
filtered_gdf[~filtered_gdf['State Name'].isin(desired_states)].plot(color=subdued_color, ax=ax)



# Remove axis
ax.set_axis_off()

# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()

# Create a colorbar
cax = fig.add_axes([0.2, 0.05, 0.6, 0.02]) # [left, bottom, width, height]
cmap = plt.cm.viridis  # define the colormap
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)  # define the normalization
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)  # create a ScalarMappable
sm.set_array([])  # empty array for the data range
cbar = plt.colorbar(sm, cax=cax, orientation='horizontal')  # create the colorbar with horizontal orientation

# Set colorbar label color to white

# Set colorbar tick labels color to white
cbar.ax.xaxis.set_tick_params(color='black')

# Set colorbar ticks and labels
ticks = np.linspace(min_value, max_value, num=5)  # Define tick positions
tick_labels = ['{:.2f}'.format(tick) for tick in ticks]  # Format tick labels
cbar.ax.xaxis.set_ticks(ticks)  # Set ticks positions
cbar.ax.set_xticklabels(tick_labels, color= 'black')  # Set tick labels and color


plt.tight_layout(pad=1)

plt.savefig("LBWindTGPCounties6.png", bbox_inches='tight', dpi=300, pad_inches=0)

# Show the plot
plt.show()

# Assuming 'merged_gdf' is your GeoDataFrame with the merged data

# Define the list of desired state names
desired_states = ['Texas', 'California', 'Nebraska', 'Massachusetts', 'New York', 'Georgia']

# Filter the GeoDataFrame to include only counties from desired states
filtered_gdf = merged_gdf.copy()

# Define a custom subdued color
subdued_color = (0.1, 0.1, 0.3)  # dark blue subdued color

# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].min()
max_value = filtered_gdf[filtered_gdf['State Name'].isin(desired_states)]['Technical Generation Potential (MWh)'].max()

# Ensure colormap and normalization match your data range
cmap = plt.cm.Oranges
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)

# Assign colors based on data values and normalization
filtered_gdf['color'] = [subdued_color if state not in desired_states else cmap(norm(merged_gdf.loc[i, 'Technical Generation Potential (MWh)'])) for i, state in enumerate(filtered_gdf['State Name'])]

# Create the plot
fig, ax = plt.subplots(figsize=(18, 11), dpi=500, facecolor='black')

# Plot counties with the assigned colors
filtered_gdf.plot(color=filtered_gdf['color'], ax=ax)

# Create colorbar
cax = fig.add_axes([0.2, 0.05, 0.6, 0.02])  # [left, bottom, width, height]
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
sm.set_array([])  # required for the colorbar to show
cbar = fig.colorbar(sm, cax=cax, orientation='horizontal')

# Set colorbar ticks and labels
ticks = np.linspace(min_value, max_value, num=5)
tick_labels = ['{:.2f}'.format(tick) for tick in ticks]
cbar.ax.xaxis.set_ticks(ticks)
cbar.ax.set_xticklabels(tick_labels, color='white')

# Add title
plt.title('Technical Generation Potential (MWh) Heatmap for Selected States')

# Remove axis
ax.set_axis_off()

plt.tight_layout(pad=1)

plt.savefig("LBWindTGPCounties4.5.png", bbox_inches='tight', dpi=300, pad_inches=0)

# Show the plot
plt.show()

"""#Mapping Land-Based Wind"""

StateTGP = pd.read_csv("/content/techpot_baseline_state.csv")

StateTGP

state_boundaries = gpd.read_file("/content/tl_2012_us_state.shp")

fig, ax = plt.subplots(figsize=(10, 15), dpi=50)
state_boundaries.plot(ax=ax, color='grey', linewidth=10)
ax.set_axis_off()
plt.savefig("county_state_boundaries.png", bbox_inches='tight', dpi=2500, pad_inches=0)
plt.show()

State_TGP_Offshore_Wind = StateTGP[StateTGP["Technology"]=="offshore_wind"]

State_TGP_Offshore_Wind.reset_index()

merged_offshore = pd.merge(state_boundaries, State_TGP_Offshore_Wind, left_on='NAME', right_on='State Name', how='outer')

merged_offshore.columns

import matplotlib.colors as mcolors


# Assuming 'merged_gdf' is your GeoDataFrame with the merged data

# Define the list of desired state names
desired_states = ['Texas', 'California', 'Nebraska', 'Massachusetts', 'New York', 'Georgia']

# Filter the GeoDataFrame to include only counties from desired states
filtered_gdf = merged_offshore.copy()

# Define a custom subdued color
subdued_color = (0.1, 0.1, 0.1)  # dark blue subdued color


# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['NAME'].isin(desired_states)]['Technical Generation Potential - MWh MWh'].min()
max_value = filtered_gdf[filtered_gdf['NAME'].isin(desired_states)]['Technical Generation Potential - MWh MWh'].max()



# Ensure colormap and normalization match your data range
cmap = plt.cm.Oranges
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)


# Assign colors based on data values and normalization
filtered_gdf['color'] = [subdued_color if state not in desired_states else cmap(norm(merged_offshore.loc[i, 'Technical Generation Potential - MWh MWh'])) for i, state in enumerate(filtered_gdf['NAME'])]




# Create the plot
fig, ax = plt.subplots(figsize=(18, 11), dpi=500, facecolor='white')

# Plot counties with the assigned colors
filtered_gdf.plot(color=filtered_gdf['color'], ax=ax)

# Create the plot for counties from other states
filtered_gdf[~filtered_gdf['NAME'].isin(desired_states)].plot(color=subdued_color, ax=ax)



# Remove axis
ax.set_axis_off()

# Get the minimum and maximum values of 'Technical Generation Potential (MWh)' for desired states
min_value = filtered_gdf[filtered_gdf['NAME'].isin(desired_states)]['Technical Generation Potential - MWh MWh'].min()
max_value = filtered_gdf[filtered_gdf['NAME'].isin(desired_states)]['Technical Generation Potential - MWh MWh'].max()

# Create a colorbar
cax = fig.add_axes([0.2, 0.05, 0.6, 0.02]) # [left, bottom, width, height]
cmap = plt.cm.Oranges  # define the colormap
norm = mcolors.Normalize(vmin=min_value, vmax=max_value)  # define the normalization
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)  # create a ScalarMappable
sm.set_array([])  # empty array for the data range
cbar = plt.colorbar(sm, cax=cax, orientation='horizontal')  # create the colorbar with horizontal orientation

# Set colorbar label color to white

# Set colorbar tick labels color to white
cbar.ax.xaxis.set_tick_params(color='black')

# Set colorbar ticks and labels
ticks = np.linspace(min_value, max_value, num=5)  # Define tick positions
tick_labels = ['{:.2f}'.format(tick) for tick in ticks]  # Format tick labels
cbar.ax.xaxis.set_ticks(ticks)  # Set ticks positions
cbar.ax.set_xticklabels(tick_labels, color= 'black')  # Set tick labels and color


plt.tight_layout(pad=1)

plt.savefig("OffshoreWindTGPCounties7.png", bbox_inches='tight', dpi=300, pad_inches=0)

# Show the plot
plt.show()